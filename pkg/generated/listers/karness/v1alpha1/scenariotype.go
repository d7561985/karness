/*
Author d7561985@gmail.com

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/d7561985/karness/pkg/apis/karness/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScenarioTypeLister helps list ScenarioTypes.
// All objects returned here must be treated as read-only.
type ScenarioTypeLister interface {
	// List lists all ScenarioTypes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScenarioType, err error)
	// ScenarioTypes returns an object that can list and get ScenarioTypes.
	ScenarioTypes(namespace string) ScenarioTypeNamespaceLister
	ScenarioTypeListerExpansion
}

// scenarioTypeLister implements the ScenarioTypeLister interface.
type scenarioTypeLister struct {
	indexer cache.Indexer
}

// NewScenarioTypeLister returns a new ScenarioTypeLister.
func NewScenarioTypeLister(indexer cache.Indexer) ScenarioTypeLister {
	return &scenarioTypeLister{indexer: indexer}
}

// List lists all ScenarioTypes in the indexer.
func (s *scenarioTypeLister) List(selector labels.Selector) (ret []*v1alpha1.ScenarioType, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScenarioType))
	})
	return ret, err
}

// ScenarioTypes returns an object that can list and get ScenarioTypes.
func (s *scenarioTypeLister) ScenarioTypes(namespace string) ScenarioTypeNamespaceLister {
	return scenarioTypeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScenarioTypeNamespaceLister helps list and get ScenarioTypes.
// All objects returned here must be treated as read-only.
type ScenarioTypeNamespaceLister interface {
	// List lists all ScenarioTypes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScenarioType, err error)
	// Get retrieves the ScenarioType from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScenarioType, error)
	ScenarioTypeNamespaceListerExpansion
}

// scenarioTypeNamespaceLister implements the ScenarioTypeNamespaceLister
// interface.
type scenarioTypeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScenarioTypes in the indexer for a given namespace.
func (s scenarioTypeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScenarioType, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScenarioType))
	})
	return ret, err
}

// Get retrieves the ScenarioType from the indexer for a given namespace and name.
func (s scenarioTypeNamespaceLister) Get(name string) (*v1alpha1.ScenarioType, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scenariotype"), name)
	}
	return obj.(*v1alpha1.ScenarioType), nil
}
